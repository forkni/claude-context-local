#!/bin/sh
# Pre-commit hook to prevent accidental commit of local-only files
# Prevents commits of CLAUDE.md, MEMORY.md, _archive/, and benchmark_results/
# Allows DELETIONS (D) but blocks additions (A) or modifications (M)

echo "Checking for local-only files..."

# Check if any local-only files are being ADDED or MODIFIED (not deleted)
PROBLEMATIC_FILES=$(git diff --cached --name-status | grep -E "^[AM]\s+(CLAUDE\.md|MEMORY\.md|_archive/|benchmark_results/)")

if [ -n "$PROBLEMATIC_FILES" ]; then
    echo "ERROR: Attempting to add or modify local-only files!"
    echo ""
    echo "The following files must remain local only:"
    echo "- CLAUDE.md (development context)"
    echo "- MEMORY.md (session memory)"
    echo "- _archive/ (764 historical files)"
    echo "- benchmark_results/ (generated test data)"
    echo ""
    echo "Problematic files:"
    echo "$PROBLEMATIC_FILES"
    echo ""
    echo "DELETIONS are allowed (removing from git tracking)"
    echo "ADDITIONS/MODIFICATIONS are blocked (privacy protection)"
    echo ""
    echo "To fix this, reset the problematic files:"
    echo "  git reset HEAD <file>"
    echo ""
    exit 1
fi

# Check for unauthorized docs/ files (only 10 specific files allowed)
ALLOWED_DOCS="^[AM]\s+docs/(BENCHMARKS\.md|claude_code_config\.md|GIT_WORKFLOW\.md|HYBRID_SEARCH_CONFIGURATION_GUIDE\.md|INSTALLATION_GUIDE\.md|MCP_TOOLS_REFERENCE\.md|MODEL_MIGRATION_GUIDE\.md|PYTORCH_COMPATIBILITY\.md|TESTING_GUIDE\.md|VSCODE_SETUP\.md)$"
UNAUTHORIZED_DOCS=$(git diff --cached --name-status | grep -E "^[AM]\s+docs/" | grep -v -E "$ALLOWED_DOCS")

if [ -n "$UNAUTHORIZED_DOCS" ]; then
    echo "ERROR: Attempting to add unauthorized docs/ files!"
    echo ""
    echo "Only these 10 documentation files are allowed in public repository:"
    echo "- docs/BENCHMARKS.md"
    echo "- docs/claude_code_config.md"
    echo "- docs/GIT_WORKFLOW.md"
    echo "- docs/HYBRID_SEARCH_CONFIGURATION_GUIDE.md"
    echo "- docs/INSTALLATION_GUIDE.md"
    echo "- docs/MCP_TOOLS_REFERENCE.md"
    echo "- docs/MODEL_MIGRATION_GUIDE.md"
    echo "- docs/PYTORCH_COMPATIBILITY.md"
    echo "- docs/TESTING_GUIDE.md"
    echo "- docs/VSCODE_SETUP.md"
    echo ""
    echo "Unauthorized files being added:"
    echo "$UNAUTHORIZED_DOCS"
    echo ""
    echo "All other docs/ files must remain local-only."
    echo "They are automatically ignored by .gitignore rules."
    echo ""
    echo "To fix this, reset the unauthorized files:"
    echo "  git reset HEAD <file>"
    echo ""
    exit 1
fi

# Check for deletions (which are allowed and expected)
DELETED_FILES=$(git diff --cached --name-status | grep -E "^D\s+(CLAUDE\.md|MEMORY\.md|_archive/|benchmark_results/)")
if [ -n "$DELETED_FILES" ]; then
    echo "✓ Local-only files being removed from git tracking (as intended)"
    echo "  Deleted files: $(echo "$DELETED_FILES" | wc -l) files"
fi

echo "✓ No problematic local-only files detected"
echo "✓ Privacy protection active"

# Check code quality for Python files
PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$')

if [ -n "$PYTHON_FILES" ]; then
    echo ""
    echo "Checking code quality..."

    # Run lint check (capture output and exit code)
    if ! cmd.exe /c "scripts\\git\\check_lint.bat" > /dev/null 2>&1; then
        echo "⚠ Lint errors detected in Python files"
        echo ""

        # Prompt user for action
        read -p "Auto-fix lint issues? (yes/no/skip): " choice

        case "$choice" in
            yes|y|Y)
                echo ""
                echo "Running auto-fix..."

                # Run fix_lint.bat
                if cmd.exe /c "scripts\\git\\fix_lint.bat"; then
                    echo ""
                    echo "Restaging fixed Python files..."
                    echo "$PYTHON_FILES" | while read -r file; do
                        git add "$file"
                    done
                    echo "✓ Files fixed and restaged"
                    echo "✓ Commit will proceed with fixed code"
                else
                    echo ""
                    echo "✗ Auto-fix encountered errors"
                    echo "Please fix manually and try again"
                    exit 1
                fi
                ;;

            no|n|N)
                echo ""
                echo "Commit aborted."
                echo ""
                echo "To fix lint errors, run:"
                echo "  scripts\\git\\fix_lint.bat"
                echo ""
                echo "Or to see errors:"
                echo "  scripts\\git\\check_lint.bat"
                exit 1
                ;;

            skip|s|S)
                echo ""
                echo "⚠ Proceeding with lint warnings (not recommended)"
                echo "⚠ CI may fail on push"
                ;;

            *)
                echo ""
                echo "✗ Invalid choice: '$choice'"
                echo "Expected: yes, no, or skip"
                echo "Commit aborted."
                exit 1
                ;;
        esac
    else
        echo "✓ Code quality checks passed"
    fi
else
    echo ""
    echo "No Python files to check"
fi

echo ""
exit 0
