[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-context-local"
version = "0.4.1"
description = "Local semantic code search for Claude Code (MCP) using EmbeddingGemma, FAISS, and AST/tree-sitter chunking. 100% local embeddings and indexing."
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "forkni" }
]
maintainers = [
    { name = "forkni" }
]
keywords = [
    "semantic-search",
    "code-search",
    "embeddings",
    "faiss",
    "mcp",
    "claude",
    "tree-sitter",
    "chunking",
    "python",
]
dependencies = [
    "click>=8.2.1",
    "datasets>=2.14.0",
    "faiss-cpu>=1.12.0",
    "fastmcp>=2.12.2",
    "FlagEmbedding>=1.3.0",
    "huggingface-hub>=0.34.4",
    "mcp>=1.13.1",
    "nltk>=3.8",
    "psutil>=6.0.0",
    "rank-bm25>=0.2.2",
    "torch>=2.6.0",
    "torchvision>=0.21.0",
    "torchaudio>=2.6.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "rich>=14.1.0",
    "sentence-transformers>=5.1.0",
    "sqlitedict>=2.1.0",
    "tiktoken>=0.5.0",
    "tree-sitter>=0.20.0",
    "tree-sitter-c>=0.24.1",
    "tree-sitter-c-sharp>=0.23.1",
    "tree-sitter-cpp>=0.23.4",
    "tree-sitter-glsl>=0.1.0",
    "tree-sitter-go>=0.25.0",
    "tree-sitter-java>=0.23.5",
    "tree-sitter-javascript>=0.25.0",
    "tree-sitter-languages>=1.10.0",
    "tree-sitter-python>=0.23.6",
    "tree-sitter-rust>=0.24.0",
    "tree-sitter-svelte>=1.0.2",
    "tree-sitter-typescript>=0.23.2",
]

classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
]

[project.urls]
Homepage = "https://github.com/forkni/claude-context-local"
Repository = "https://github.com/forkni/claude-context-local"
Documentation = "https://github.com/forkni/claude-context-local#readme"
Issues = "https://github.com/forkni/claude-context-local/issues"

[tool.setuptools.packages.find]
include = ["chunking*", "embeddings*", "mcp_server*", "search*", "merkle*"]

[tool.uv]
index-url = "https://pypi.org/simple"

[[tool.uv.index]]
name = "pytorch-cu118"
url = "https://download.pytorch.org/whl/cu118"
explicit = true

[tool.uv.sources]
torch = [
    { index = "pytorch-cu118", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]
torchvision = [
    { index = "pytorch-cu118", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]
torchaudio = [
    { index = "pytorch-cu118", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]

# Code quality tools configuration
[tool.black]
line-length = 88
target-version = ["py311"]
exclude = '''
/(
    \.git
  | \.venv
  | _archive
  | build
  | dist
  | node_modules
)/
'''

[tool.isort]
profile = "black"
line_length = 88
skip_glob = ["_archive/*", ".venv/*"]
known_first_party = ["chunking", "embeddings", "mcp_server", "search", "merkle", "evaluation"]

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".git",
    ".venv",
    "_archive",
    "build",
    "dist",
    "__pycache__",
    "tests/test_data",  # Sample code for testing, not production code
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E501",  # line too long (handled by black)
]
