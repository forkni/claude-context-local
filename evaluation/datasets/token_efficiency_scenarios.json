{
  "metadata": {
    "name": "Token Efficiency Evaluation Scenarios",
    "description": "Test scenarios comparing MCP semantic search vs vanilla file reading for token efficiency",
    "version": "2.0",
    "created": "2025-01-28",
    "use_case": "Benchmark token savings when using semantic search on the actual claude-context-local project"
  },
  "instances": [
    {
      "instance_id": "embedding_model_search",
      "query": "embedding model loading initialization gemma",
      "ground_truth_files": [
        "embeddings/embedder.py",
        "mcp_server/server.py"
      ],
      "ground_truth_content": "Code for loading and managing the EmbeddingGemma model",
      "metadata": {
        "difficulty": "medium",
        "scenario_type": "model_management",
        "expected_token_savings": "70-85%",
        "description": "Finding embedding model initialization without reading entire modules"
      }
    },
    {
      "instance_id": "hybrid_search_implementation",
      "query": "hybrid search BM25 semantic fusion reranking",
      "ground_truth_files": [
        "search/hybrid_searcher.py",
        "search/bm25_index.py",
        "search/reranker.py"
      ],
      "ground_truth_content": "Hybrid search implementation combining BM25 and semantic search",
      "metadata": {
        "difficulty": "medium",
        "scenario_type": "search_algorithm",
        "expected_token_savings": "60-80%",
        "description": "Understanding search fusion without reading all search modules"
      }
    },
    {
      "instance_id": "code_chunking_parsing",
      "query": "tree sitter AST parsing chunking functions classes",
      "ground_truth_files": [
        "chunking/tree_sitter.py",
        "chunking/python_ast_chunker.py",
        "chunking/multi_language_chunker.py"
      ],
      "ground_truth_content": "Code parsing and chunking implementations for multiple languages",
      "metadata": {
        "difficulty": "medium",
        "scenario_type": "parsing_implementation",
        "expected_token_savings": "65-85%",
        "description": "Finding parsing logic without exploring entire chunking system"
      }
    },
    {
      "instance_id": "incremental_indexing_merkle",
      "query": "incremental index merkle tree change detection snapshot",
      "ground_truth_files": [
        "search/incremental_indexer.py",
        "merkle/merkle_dag.py",
        "merkle/change_detector.py"
      ],
      "ground_truth_content": "Incremental indexing with Merkle tree change detection",
      "metadata": {
        "difficulty": "hard",
        "scenario_type": "indexing_system",
        "expected_token_savings": "50-75%",
        "description": "Understanding incremental indexing without reading all related files"
      }
    },
    {
      "instance_id": "mcp_server_tools",
      "query": "MCP server tools index_directory search_code configuration",
      "ground_truth_files": [
        "mcp_server/server.py",
        "search/config.py"
      ],
      "ground_truth_content": "MCP server implementation and tool definitions",
      "metadata": {
        "difficulty": "medium",
        "scenario_type": "server_implementation",
        "expected_token_savings": "70-90%",
        "description": "Finding MCP tools without reading entire server implementation"
      }
    }
  ]
}