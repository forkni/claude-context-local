# .github/workflows/branch-protection.yml
name: Branch Protection

on:
  push:
    branches: [development, main]
  pull_request:
    branches: [development, main]

jobs:
  validate:
    name: Validate Branch State
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for branch comparison

      - name: Check for local-only files
        run: |
          echo "Checking for accidentally committed local files..."

          # Check for prohibited files
          FOUND_ISSUES=0

          for file in CLAUDE.md MEMORY.md; do
            if git ls-files | grep -q "^$file$"; then
              echo "❌ ERROR: $file is tracked in git (should be local-only)"
              FOUND_ISSUES=1
            fi
          done

          # Check for prohibited directories
          for dir in _archive benchmark_results; do
            if git ls-files | grep -q "^$dir/"; then
              echo "❌ ERROR: $dir/ is tracked in git (should be local-only)"
              FOUND_ISSUES=1
            fi
          done

          if [ $FOUND_ISSUES -eq 0 ]; then
            echo "✅ No local-only files detected"
          else
            echo ""
            echo "Fix: Remove these files from git tracking"
            exit 1
          fi

      - name: Verify .gitattributes exists
        run: |
          if [ ! -f .gitattributes ]; then
            echo "❌ ERROR: .gitattributes not found"
            echo "This file is required for proper merge behavior"
            exit 1
          fi
          echo "✅ .gitattributes found"

      - name: Check for unauthorized docs
        run: |
          echo "Checking docs/ directory..."

          # Allowed public documentation files (main branch)
          ALLOWED_DOCS="BENCHMARKS.md|claude_code_config.md|GIT_WORKFLOW.md|HYBRID_SEARCH_CONFIGURATION_GUIDE.md|INSTALLATION_GUIDE.md|MCP_TOOLS_REFERENCE.md|MODEL_MIGRATION_GUIDE.md|PYTORCH_COMPATIBILITY.md"

          # Find unauthorized docs (only check on main branch)
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            UNAUTHORIZED=$(git ls-files docs/ | grep -v -E "docs/($ALLOWED_DOCS)$" || true)

            if [ -n "$UNAUTHORIZED" ]; then
              echo "❌ ERROR: Unauthorized documentation files found on main branch:"
              echo "$UNAUTHORIZED"
              echo ""
              echo "Only these 8 docs are allowed in main branch:"
              echo "$ALLOWED_DOCS" | tr '|' '\n'
              exit 1
            fi
          fi

          echo "✅ Documentation validation passed"

  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    needs: validate
    # Only run tests on development branch (main doesn't have tests/)
    if: github.ref == 'refs/heads/development'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests
        run: |
          pytest tests/ -v --tb=short --maxfail=5
        continue-on-error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          pip install ruff black isort

      - name: Run ruff
        run: ruff check .
        continue-on-error: true

      - name: Check formatting
        run: black --check .
        continue-on-error: true

      - name: Check imports
        run: isort --check-only .
        continue-on-error: true

  merge-check:
    name: Merge Validation (Main Branch Only)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify no tests in main branch
        run: |
          if [ -d "tests" ]; then
            echo "❌ ERROR: tests/ directory found in main branch"
            echo "Tests should only exist in development branch"
            echo "This indicates .gitattributes merge strategy failed"
            exit 1
          fi
          echo "✅ No tests/ directory in main (as expected)"

      - name: Verify no pytest.ini in main branch
        run: |
          if [ -f "pytest.ini" ]; then
            echo "❌ ERROR: pytest.ini found in main branch"
            echo "This file should only exist in development branch"
            exit 1
          fi
          echo "✅ No pytest.ini in main (as expected)"

      - name: Report merge validation success
        run: |
          echo "✅ Main branch merge validation passed"
          echo "   - No test files present"
          echo "   - .gitattributes working correctly"
